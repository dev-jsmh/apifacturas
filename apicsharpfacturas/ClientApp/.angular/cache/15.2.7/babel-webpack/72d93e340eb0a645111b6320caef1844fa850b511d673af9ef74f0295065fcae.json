{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { ProductEntity } from 'src/app/models/ProductEntity';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/services/product.service\";\nimport * as i4 from \"@angular/common\";\nfunction ProductUpdateComponent_form_6_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" El nombre es obligatorio \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ProductUpdateComponent_form_6_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" El modelo es obligatorio \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ProductUpdateComponent_form_6_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" El precio es obligatorio \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ProductUpdateComponent_form_6_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" La cantidad es obligatoria \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ProductUpdateComponent_form_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 4);\n    i0.ɵɵlistener(\"ngSubmit\", function ProductUpdateComponent_form_6_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.onSubmit());\n    });\n    i0.ɵɵelementStart(1, \"div\", 5)(2, \"label\");\n    i0.ɵɵtext(3, \"Nombre\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 6);\n    i0.ɵɵtemplate(5, ProductUpdateComponent_form_6_div_5_Template, 2, 0, \"div\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\");\n    i0.ɵɵtext(8, \"Modelo\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"input\", 8);\n    i0.ɵɵtemplate(10, ProductUpdateComponent_form_6_div_10_Template, 2, 0, \"div\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 5)(12, \"label\");\n    i0.ɵɵtext(13, \"Precio\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(14, \"input\", 9);\n    i0.ɵɵtemplate(15, ProductUpdateComponent_form_6_div_15_Template, 2, 0, \"div\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\", 5)(17, \"label\");\n    i0.ɵɵtext(18, \"Stock\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(19, \"input\", 10);\n    i0.ɵɵtemplate(20, ProductUpdateComponent_form_6_div_20_Template, 2, 0, \"div\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"a\", 11);\n    i0.ɵɵtext(22, \"cancelar\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"button\", 12);\n    i0.ɵɵtext(24, \"guardar\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    let tmp_2_0;\n    let tmp_3_0;\n    let tmp_4_0;\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.updateProductForm);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx_r0.updateProductForm.get(\"name\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx_r0.updateProductForm.get(\"name\")) == null ? null : tmp_1_0.touched));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx_r0.updateProductForm.get(\"model\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx_r0.updateProductForm.get(\"model\")) == null ? null : tmp_2_0.touched));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx_r0.updateProductForm.get(\"price\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx_r0.updateProductForm.get(\"price\")) == null ? null : tmp_3_0.touched));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx_r0.updateProductForm.get(\"stock\")) == null ? null : tmp_4_0.invalid) && ((tmp_4_0 = ctx_r0.updateProductForm.get(\"stock\")) == null ? null : tmp_4_0.touched));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.updateProductForm.valid && !ctx_r0.updateProductForm.touched);\n  }\n}\nexport class ProductUpdateComponent {\n  // inject dependencies \n  constructor(fb, route, productService) {\n    this.fb = fb;\n    this.route = route;\n    this.productService = productService;\n    // product id form route\n    this.productId = '';\n    // current product\n    this.currentProduct = new ProductEntity();\n    this.isLoaded = false;\n    // extract the product id from route\n    this.route.params.subscribe({\n      next: params => {\n        this.productId = params['id'];\n      },\n      error: error => {\n        console.log(\"El producto con id \" + this.productId + \" no existe en la base de datos. \");\n        console.log(error);\n      }\n    });\n    // request the product from back-end\n    this.productService.getById(this.productId).subscribe({\n      next: res => {\n        this.currentProduct = res;\n        console.log(\"Producto obtenido correctamente para actualizar: \");\n        console.log(this.currentProduct);\n      },\n      error: error => {\n        console.log(\"Error al obtener el producto de la base de datos. \");\n        console.log(error);\n      }\n    });\n    // change state of isLoades after 1sg\n    setTimeout(() => {\n      // create form with client data \n      this.updateProductForm = this.fb.group({\n        \"name\": [this.currentProduct.name, Validators.required],\n        \"model\": [this.currentProduct.model, Validators.required],\n        \"price\": [this.currentProduct.price, Validators.required],\n        \"stock\": [this.currentProduct.stock, Validators.required]\n      });\n      this.isLoaded = true;\n    }, 1000);\n  }\n  // method to handle form \n  onSubmit() {\n    console.log(this.updateProductForm.value);\n    this.productService.update(this.productId).subscribe({\n      next: res => {\n        console.log(\"product update successfully\");\n        console.log(res);\n      }\n    });\n  }\n}\nProductUpdateComponent.ɵfac = function ProductUpdateComponent_Factory(t) {\n  return new (t || ProductUpdateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ProductService));\n};\nProductUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ProductUpdateComponent,\n  selectors: [[\"app-product-update\"]],\n  decls: 7,\n  vars: 1,\n  consts: [[1, \"container-fluid\"], [\"routerLink\", \"../details\"], [1, \"container\"], [\"class\", \"col-md-6\", 3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [1, \"col-md-6\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"model\", 1, \"form-control\"], [\"type\", \"number\", \"formControlName\", \"price\", 1, \"form-control\"], [\"type\", \"number\", \"formControlName\", \"stock\", 1, \"form-control\"], [\"routerLink\", \"../details\", 1, \"btn\", \"btn-primary\"], [\"type\", \"submit\", 1, \"btn\", \"btn-secondary\", 3, \"disabled\"], [1, \"text-danger\"]],\n  template: function ProductUpdateComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"a\", 1);\n      i0.ɵɵtext(2, \"<-\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"h3\");\n      i0.ɵɵtext(5, \"Actualizar Datos Producto\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, ProductUpdateComponent_form_6_Template, 25, 6, \"form\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoaded);\n    }\n  },\n  dependencies: [i4.NgIf, i2.RouterLink, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","ProductEntity","i0","ProductUpdateComponent","constructor","fb","route","productService","params","subscribe","next","productId","error","console","log","getById","res","currentProduct","setTimeout","updateProductForm","group","name","required","model","price","stock","isLoaded","onSubmit","value","update","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/usuario/Projects/apicsharpfacturas/apicsharpfacturas/ClientApp/src/app/products/product-update/product-update.component.ts","/Users/usuario/Projects/apicsharpfacturas/apicsharpfacturas/ClientApp/src/app/products/product-update/product-update.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Navigation, Route, Router } from '@angular/router';\nimport { ProductEntity } from 'src/app/models/ProductEntity';\nimport { ProductService } from 'src/app/services/product.service';\n\n@Component({\n  selector: 'app-product-update',\n  templateUrl: './product-update.component.html',\n  styleUrls: ['./product-update.component.css']\n})\nexport class ProductUpdateComponent {\n\n\n  updateProductForm: any;\n\n  // product id form route\n  public productId = '';\n  // current product\n  public currentProduct: ProductEntity = new ProductEntity();\n  public isLoaded = false;\n\n  // inject dependencies \n  constructor(private fb: FormBuilder, private route: ActivatedRoute, private productService: ProductService) {\n\n    // extract the product id from route\n    this.route.params.subscribe({\n      next: (params) => {\n        this.productId = params['id']\n      },\n      error: (error) => {\n        console.log(\"El producto con id \" + this.productId + \" no existe en la base de datos. \");\n        console.log(error);\n\n      }\n    });\n    // request the product from back-end\n    this.productService.getById(this.productId).subscribe({\n\n      next: (res: any) => {\n        this.currentProduct = res;\n        console.log(\"Producto obtenido correctamente para actualizar: \");\n        console.log(this.currentProduct);\n      },\n      error: (error) => {\n        console.log(\"Error al obtener el producto de la base de datos. \");\n        console.log(error);\n      }\n    });\n// change state of isLoades after 1sg\n    setTimeout( () => {\n       // create form with client data \n    this.updateProductForm = this.fb.group(\n      {\n        \"name\": [this.currentProduct.name, Validators.required],\n        \"model\": [this.currentProduct.model, Validators.required],\n        \"price\": [this.currentProduct.price, Validators.required],\n        \"stock\": [this.currentProduct.stock, Validators.required]\n      })\n      this.isLoaded = true;\n    }, 1000);\n\n   \n\n\n  }\n\n  // method to handle form \n\n  onSubmit() {\n    console.log(this.updateProductForm.value);\n\n    this.productService.update(this.productId).subscribe({\n      next: (res: any ) => {\n        console.log(\"product update successfully\");\n        console.log(res);\n      }\n    });\n\n  }\n\n}\n","\n\n<div class=\"container-fluid\">\n\n    <a routerLink=\"../details\"><-</a>\n</div>\n\n\n<div class=\"container\">\n\n    <h3>Actualizar Datos Producto</h3>\n\n    <form *ngIf=\"isLoaded\" [formGroup]=\"updateProductForm\" (ngSubmit)=\"onSubmit()\" class=\"col-md-6\">\n      \n        <div class=\"mb-3\">\n            <label>Nombre</label>\n            <input class=\"form-control\" type=\"text\" formControlName=\"name\">\n            <div *ngIf=\"updateProductForm.get('name')?.invalid && updateProductForm.get('name')?.touched\" class=\"text-danger\">\n                El nombre es obligatorio\n            </div>\n        </div>\n        <div class=\"mb-3\">\n            <label>Modelo</label>\n            <input class=\"form-control\" type=\"text\" formControlName=\"model\" >\n            <div *ngIf=\"updateProductForm.get('model')?.invalid && updateProductForm.get('model')?.touched \" class=\"text-danger\">\n                El modelo es obligatorio\n            </div>\n        </div> \n        <div class=\"mb-3\">\n            <label>Precio</label>\n            <input class=\"form-control\" type=\"number\" formControlName=\"price\" >\n            <div *ngIf=\"updateProductForm.get('price')?.invalid &&  updateProductForm.get('price')?.touched\" class=\"text-danger\">\n                El precio es obligatorio\n                </div>\n        </div>\n        <div class=\"mb-3\">\n            <label>Stock</label>\n            <input class=\"form-control\" type=\"number\" formControlName=\"stock\">\n            <div *ngIf=\"updateProductForm.get('stock')?.invalid && updateProductForm.get('stock')?.touched\" class=\"text-danger\">\n            La cantidad es obligatoria\n            </div>\n        </div>\n        \n        <a class=\"btn btn-primary\" routerLink=\"../details\">cancelar</a>\n        <button class=\"btn btn-secondary\" type=\"submit\" [disabled]=\"!updateProductForm.valid && !updateProductForm.touched \" >guardar</button>\n        </form>\n\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}