{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ProductEntity } from 'src/app/models/ProductEntity';\nlet ProductUpdateComponent = class ProductUpdateComponent {\n  // inject dependencies \n  constructor(fb, route, productService, router) {\n    this.fb = fb;\n    this.route = route;\n    this.productService = productService;\n    this.router = router;\n    // product id form route\n    this.productId = '';\n    // current product\n    this.currentProduct = new ProductEntity();\n    this.isLoaded = false;\n    // extract the product id from route\n    this.route.params.subscribe({\n      next: params => {\n        this.productId = params['id'];\n      },\n      error: error => {\n        console.log(\"El producto con id \" + this.productId + \" no existe en la base de datos. \");\n        console.log(error);\n      }\n    });\n    // request the product from back-end\n    this.productService.getById(this.productId).subscribe({\n      next: res => {\n        this.currentProduct = res;\n        console.log(\"Producto obtenido correctamente para actualizar: \");\n        console.log(this.currentProduct);\n      },\n      error: error => {\n        console.log(\"Error al obtener el producto de la base de datos. \");\n        console.log(error);\n      }\n    });\n    // change state of isLoades after 1sg\n    setTimeout(() => {\n      // create form with client data \n      this.updateProductForm = this.fb.group({\n        \"name\": [this.currentProduct.name, Validators.required],\n        \"model\": [this.currentProduct.model, Validators.required],\n        \"price\": [this.currentProduct.price, Validators.required],\n        \"stock\": [this.currentProduct.stock, Validators.required]\n      });\n      this.isLoaded = true;\n    }, 500);\n  }\n  // method to handle form \n  onSubmit() {\n    console.log(this.updateProductForm.value);\n    // make update request to back-end\n    this.productService.update(this.productId, this.updateProductForm.value).subscribe({\n      next: res => {\n        console.log(\"product update successfully\");\n        console.log(res);\n      },\n      error: error => {\n        console.log(\"Error when trying to update product information.\");\n        console.log(error);\n      }\n    });\n  }\n};\nProductUpdateComponent = __decorate([Component({\n  selector: 'app-product-update',\n  templateUrl: './product-update.component.html',\n  styleUrls: ['./product-update.component.css']\n})], ProductUpdateComponent);\nexport { ProductUpdateComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","ProductEntity","ProductUpdateComponent","constructor","fb","route","productService","router","params","subscribe","next","productId","error","console","log","getById","res","currentProduct","setTimeout","updateProductForm","group","name","required","model","price","stock","isLoaded","onSubmit","value","update","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/usuario/Projects/apicsharpfacturas/apicsharpfacturas/ClientApp/src/app/products/product-update/product-update.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Navigation, Route, Router } from '@angular/router';\nimport { ProductEntity } from 'src/app/models/ProductEntity';\nimport { ProductService } from 'src/app/services/product.service';\n\n@Component({\n  selector: 'app-product-update',\n  templateUrl: './product-update.component.html',\n  styleUrls: ['./product-update.component.css']\n})\nexport class ProductUpdateComponent {\n\n\n  updateProductForm: any;\n\n  // product id form route\n  public productId = '';\n  // current product\n  public currentProduct: ProductEntity = new ProductEntity();\n  public isLoaded = false;\n\n  // inject dependencies \n  constructor(\n    private fb: FormBuilder, \n    private route: ActivatedRoute,\n     private productService: ProductService, \n    private router) {\n\n    // extract the product id from route\n    this.route.params.subscribe({\n      next: (params) => {\n        this.productId = params['id']\n      },\n      error: (error) => {\n        console.log(\"El producto con id \" + this.productId + \" no existe en la base de datos. \");\n        console.log(error);\n\n      }\n    });\n    // request the product from back-end\n    this.productService.getById(this.productId).subscribe({\n\n      next: (res: any) => {\n        this.currentProduct = res;\n        console.log(\"Producto obtenido correctamente para actualizar: \");\n        console.log(this.currentProduct);\n      },\n      error: (error) => {\n        console.log(\"Error al obtener el producto de la base de datos. \");\n        console.log(error);\n      }\n    });\n// change state of isLoades after 1sg\n    setTimeout( () => {\n       // create form with client data \n    this.updateProductForm = this.fb.group(\n      {\n        \"name\": [this.currentProduct.name, Validators.required],\n        \"model\": [this.currentProduct.model, Validators.required],\n        \"price\": [this.currentProduct.price, Validators.required],\n        \"stock\": [this.currentProduct.stock, Validators.required]\n      })\n      this.isLoaded = true;\n    }, 500);\n\n   \n\n\n  }\n\n  // method to handle form \n  onSubmit() {\n    console.log(this.updateProductForm.value);\n// make update request to back-end\n    this.productService.update( this.productId, this.updateProductForm.value ).subscribe({\n      next: (res: any ) => {\n        console.log(\"product update successfully\");\n        console.log(res);\n      },\n      error: ( error ) => {\n        console.log(\"Error when trying to update product information.\");\n        console.log(error);\n      }\n    });\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}